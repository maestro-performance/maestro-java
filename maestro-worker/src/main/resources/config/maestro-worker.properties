#
# Copyright 2018 Otavio R. Piske <angusyoung@gmail.com>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# Common worker properties

# Use a fixed host to override the host detection mechanism
# maestro.worker.host=my.fqdn.host.com

# The amount of time, in milliseconds, between each update of the latency reporting information.
# This also affects how fresh the latency information is when evaluating the FCL for go/no-go
# purposes
# worker.reporting.interval=10000


# Default policy when evaluating the FCL. Acceptable values are either 'hard' or 'soft'. The value hard means that if
# the latency *ever* the threshold set by the front-end, then the test is aborted. The value 'soft' means that the
# current latency threshold will be checked against a percentile defined on 'worker.fcl.soft.percentile'.
# The default FCL policy is 'soft'.
# worker.fcl.default.policy=soft

# The percentile used to check the latency threshold for the 'soft' FCL policy
# worker.fcl.soft.percentile=90.0


# When sending multiple notes in a row, it might be desired to throttle the pace on which they are sent.
# This is usually required when using a Java-based Maestro broker in a constrained memory environment,
# so that it does not exhaust the JVM memory heap. TL;DR: this is helpful to throttle the worker so that
# the clients can consume the messages faster. This delay is in milliseconds.
# worker.throttle.delay=500

# How much time it will wait for each worker to complete its unit of work after processing an event
# that results in test stop or the test is complete (in milliseconds)
# worker.stop.timeout=1000


# How many tries the workers have until they consider a queue as drained.
# worker.auto.drain.retries=10


# The maximum combined amount of time for all the workers to complete their unit of work after processing
# an event that results in test stop or the test is complete (in milliseconds)
# worker.active.deadline.max=65000

# The maximum amount of time, in seconds, that the drain is allowed to run
# worker.drain.deadline.secs=45